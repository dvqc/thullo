generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  myboards      Board[]   @relation(name: "owner")
  boards        Board[]   @relation(name: "team")
  tasks         Task[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Label {
  id     String @id @default(cuid())
  taskId String
  name   String
  color  String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Comment {
  id     String @id @default(cuid())
  userId String
  taskId String
  text   String
  owner  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String    @default("")
  cover       String?
  indx        Int
  comments    Comment[]
  labels      Label[]
  members     User[]

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String
}

model List {
  id      String @id @default(cuid())
  boardId String
  title   String
  tasks   Task[]
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Board {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String   @default("")
  isPrivate   Boolean  @default(false)
  picture     String?
  createdAt   DateTime
  owner       User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "owner")
  team        User[]   @relation(name: "team")
  lists       List[]
}
